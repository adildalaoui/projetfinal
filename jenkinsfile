pipeline {
    agent any
    
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }

    stages {
        stage('Git checkout') {
            steps {
                git 'https://github.com/adildalaoui/projetfinal.git'
            }
        }
        stage('Test') {
            steps {
                script {
                    echo "Vérification de la présence du fichier test_app.py dans l'image Docker"
                    // Exécuter une commande pour lister le contenu du répertoire /app
                    sh 'docker run --rm adildal/python-webapp:latest ls -l /app'

                    echo "Exécution des tests avec pytest"
                    // Exécuter pytest pour le fichier de test test_app.py
                    sh 'docker run --rm adildal/python-webapp:latest pytest /app/test_app.py --maxfail=1 --disable-warnings -q'
                }
            }
        }
        stage('Owasp') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ ', odcInstallation: 'DC'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
   
        stage('Sonarqube analysis') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh ''' 
                    $SCANNER_HOME/bin/sonar-scanner -Dsonar.url=http://192.168.1.143:9000/ \
                    -Dsonar.login=squ_74b1e61fa79dc770b435fcf1e2cd06d01b4f0870 \
                    -Dsonar.projectName=python-webapp \
                    -Dsonar.java.binaries=. \
                    -Dsonar.projectKey=python-webapp 
                    '''
                }
            }
        }

        stage('Docker Build and Tag') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred2', url: 'https://index.docker.io/v1/') {
                        sh 'docker build -t python-webapp:latest -f Dockerfile .'
                        sh 'docker tag python-webapp:latest adildal/python-webapp:latest'
                        sh 'docker push adildal/python-webapp:latest'
                    }
                }
            }
        }

        stage('Trigger cd pipeline') {
            steps {
                build job: 'cd_pipeline', wait: true
            }
        }
    }

    post {
        always {
            echo 'Pipeline terminé'
        }
        success {
            echo 'Tests réussis'
        }
        failure {
            echo 'Tests échoués'
        }
    }
}
